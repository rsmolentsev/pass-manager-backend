openapi: 3.0.1
info:
  title: Password Manager API
  description: |
    Secure API for managing passwords and user settings.
    Features:
    - User registration and authentication
    - Secure password storage with AES encryption
    - Master password management
    - Password entry CRUD operations
    - User settings management
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server
paths:
  /register:
    post:
      summary: Register a new user
      description: Creates a new user account with a master password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: User ID
        '400':
          description: Invalid request parameters
        '409':
          description: Username already exists
  /login:
    post:
      summary: Login with username and password
      description: Authenticates a user and returns a JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
        '401':
          description: Invalid credentials
        '400':
          description: Invalid request parameters
  /change-master-password:
    put:
      summary: Change master password
      description: Updates the user's master password
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeMasterPasswordRequest'
      responses:
        '200':
          description: Master password changed successfully
        '401':
          description: Invalid current password or unauthorized
        '400':
          description: Invalid request parameters
  /passwords:
    get:
      summary: Get all password entries
      description: Retrieves all password entries for the authenticated user
      tags:
        - Passwords
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of password entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PasswordEntry'
        '401':
          description: Unauthorized
    post:
      summary: Create a new password entry
      description: Creates a new password entry for the authenticated user
      tags:
        - Passwords
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordEntryRequest'
      responses:
        '201':
          description: Password entry created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Password entry ID
        '401':
          description: Unauthorized
        '400':
          description: Invalid request parameters
  /passwords/{id}:
    get:
      summary: Get password entry by ID
      description: Retrieves a specific password entry by its ID
      tags:
        - Passwords
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Password entry ID
      responses:
        '200':
          description: Password entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordEntry'
        '401':
          description: Unauthorized
        '404':
          description: Password entry not found
    put:
      summary: Update password entry
      description: Updates an existing password entry
      tags:
        - Passwords
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Password entry ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordEntryRequest'
      responses:
        '200':
          description: Password entry updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Password entry not found
        '400':
          description: Invalid request parameters
    delete:
      summary: Delete password entry
      description: Deletes a password entry
      tags:
        - Passwords
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Password entry ID
      responses:
        '200':
          description: Password entry deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Password entry not found
  /passwords/{id}/decrypt:
    post:
      summary: Decrypt password entry
      description: Decrypts a password entry
      tags:
        - Passwords
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Password entry ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                masterPassword:
                  type: string
                  description: Master password of the current user
      responses:
        '200':
          description: Decrypted password entry
          content:
            application/json:
              schema:
                type: object
                properties:
                  password:
                    type: string
                    description: Decrypted password
        '401':
          description: Unauthorized
  /settings:
    get:
      summary: Get user settings
      description: Retrieves the current user's settings
      tags:
        - Settings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        '401':
          description: Unauthorized
    put:
      summary: Update user settings
      description: Updates the current user's settings
      tags:
        - Settings
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingsUpdateRequest'
      responses:
        '200':
          description: Settings updated successfully
        '401':
          description: Unauthorized
        '400':
          description: Invalid request parameters
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username (3-50 characters)
        password:
          type: string
          description: Master password (8-100 characters)
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username
        password:
          type: string
          description: Master password
    ChangeMasterPasswordRequest:
      type: object
      required:
        - oldMasterPassword
        - newMasterPassword
      properties:
        oldMasterPassword:
          type: string
          description: Current master password
        newMasterPassword:
          type: string
          description: New master password (8-100 characters)
    PasswordEntry:
      type: object
      required:
        - id
        - userId
        - resourceName
        - username
        - password
      properties:
        id:
          type: integer
          description: Password entry ID
        userId:
          type: integer
          description: User ID
        resourceName:
          type: string
          description: Resource name (e.g., website URL)
        username:
          type: string
          description: Username for the resource
        password:
          type: string
          description: Encrypted password (AES encrypted)
        notes:
          type: string
          description: Optional notes about the password entry
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
    PasswordEntryRequest:
      type: object
      required:
        - resourceName
        - username
        - password
        - notes
        - masterPassword
      properties:
        resourceName:
          type: string
          description: Resource name (e.g., website URL)
        username:
          type: string
          description: Username for the resource
        password:
          type: string
          description: Password for the resource
        notes:
          type: string
          description: Optional notes about the password entry
        masterPassword:
          type: string
          description: Master password of the current user
    UserSettings:
      type: object
      required:
        - autoLogoutMinutes
      properties:
        userId:
          type: integer
          description: User ID
        autoLogoutMinutes:
          type: integer
          description: Auto logout time in minutes
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
    SettingsUpdateRequest:
      type: object
      required:
        - autoLogoutMinutes
      properties:
        autoLogoutMinutes:
          type: integer
          description: Auto logout time in minutes 